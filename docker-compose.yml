
services:
  redis:
    image: redis:7-alpine
    container_name: agent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: agent_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database migration service - runs before app starts
  migrations:
    build:
      context: .
      dockerfile: docker/Dockerfile.migrations
    container_name: agent_migrations
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"  # Only run once
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        ./scripts/wait-for-postgres.sh &&
        echo 'Running database migrations...' &&
        uv run python scripts/migrate.py --verbose
      "

  app:
    build: .
    container_name: agent_app
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "uv", "run", "python", "scripts/healthcheck.py"]
      interval: 60s
      timeout: 10s
      retries: 3

  celery-worker:
    build: .
    container_name: agent_celery_worker
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    restart: unless-stopped
    command: uv run celery -A src.services.task_queue.celery_app worker --loglevel=info

  celery-flower:
    build: .
    container_name: agent_celery_flower
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped
    command: uv run celery -A src.services.task_queue.celery_app flower --port=5555

volumes:
  postgres_data:
  redis_data: